{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```\n",
    "Unit Testing\n",
    "Regular expression + Practice \n",
    "matplotlib - data visualization\n",
    "numpy, pandas\n",
    "database connection\n",
    "Introduction to gui\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "```\n",
    "assertEqual\n",
    "assertTrue\n",
    "assertFalse\n",
    "..E.\n",
    "Ok\n",
    "Fail\n",
    "Error\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import unittest\n",
    "\n",
    "class MyClass(unittest.TestCase):\n",
    "    def test_upper(self):\n",
    "        self.assertEqual('inDIa'.upper(), \"INDIA\")\n",
    "        \n",
    "unittest.main()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Regular Expression\n",
    "\n",
    "- filtering data based on pattern"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Special characters in pattern making"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```\n",
    "\\d : digit : [0-9]\n",
    "\\w : word  : [A-Za-z0-9_]\n",
    "\\s : spaces\n",
    "alphabet : [a-zA-Z]\n",
    "alnum : [a-zA-Z0-9]\n",
    ".  : everything except \\n : [^\\n]\n",
    "\\D : [^\\d]\n",
    "\\W : [^\\w]\n",
    "\\S : [^\\s]\n",
    "[^a-zA-Z] : other than letters\n",
    "|  : or\n",
    "$  : endswith \n",
    "^  : startswith \n",
    "[] : non-grouping\n",
    "[^...] : negation\n",
    "() : grouping\n",
    "-----------------------------------\n",
    "{n} : repitition\n",
    "{min, max} \n",
    "*  : {0,}\n",
    "+  : {1,}\n",
    "?  : {0,1}\n",
    "r'' : raw_string, \\\\\n",
    "(...)\\1 : 2 or more repitions of pattern group\n",
    "\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## re functions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import re"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```\n",
    "re.search(pattern, data, *flag)\n",
    "re.findall(pattern, data, *flag)\n",
    "re.match(pattern, data, *flag)\n",
    "re.fullmatch(pattern, data, *flag)\n",
    "\n",
    "re.compile(pattern, *flag)\n",
    "re.sub(old_p, new_p, data, count=*)\n",
    "re.subn(old_p, new_p, data, count=*)\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### re flags"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```\n",
    "re.I  : Ignore case\n",
    "re.X  : Ignore spaces\n",
    "re.M  : Multiline\n",
    "re.A  : Ascii\n",
    "re.U  : Unicode\n",
    "re.DOTALL : '\\n' get includes in '.'\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import re\n",
    "\n",
    "p = \"Camera\"\n",
    "data = \"\"\"My old camera is broken. \n",
    "I want to purchse a new CAMERA\"\"\"\n",
    "\n",
    "var = re.search(p, data, re.I)\n",
    "if var:\n",
    "    print(\"Index range\", var.span())\n",
    "    print(\"Value found\", var.group())\n",
    "else:\n",
    "    print(\"Pattern not found\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import re\n",
    "\n",
    "p = \"Camera\"\n",
    "data = \"\"\"My old camera is broken. \n",
    "I want to purchse a new CAMERA\"\"\"\n",
    "\n",
    "var = re.findall(p, data, re.I)\n",
    "print(var)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import re\n",
    "def validate(passwd):\n",
    "    var = re.match('...', passwd)\n",
    "    if var:\n",
    "        return \"Valid password.\"\n",
    "    else:\n",
    "        return \"Invalid password.\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import re\n",
    "data = 'non-sense'\n",
    "pattern = 'non-(.*)'\n",
    "var = re.search(pattern, data)\n",
    "if var:\n",
    "    print(var.group(1)[:3])\n",
    "else:\n",
    "    print(\"Pattern not found\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import re\n",
    "with open('source.txt') as f:\n",
    "    data = f.read()\n",
    "p = '[a-z0-9._]+@[a-z]+\\.[a-z]+'\n",
    "content = re.findall(p, data)\n",
    "abcd_count = 0\n",
    "gmail_count = 0\n",
    "for i in content:\n",
    "    if i.endswith('abcd.com'):\n",
    "        abcd_count += 1\n",
    "    elif i.endswith('gmail.com'):\n",
    "        gmail_count += 1\n",
    "print(abcd_count)\n",
    "print(gmail_count)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# pip install numpy\n",
    "# pip install pandas\n",
    "# pip install matplotlib"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Data visualization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "import matplotlib.pyplot as plt\n",
    "plt.title(\"My graph title\")\n",
    "plt.xlabel(\"x-axis\")\n",
    "plt.ylabel(\"y-axis\")\n",
    "plt.grid()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Lines "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "import matplotlib.pyplot as plt\n",
    "plt.title(\"My graph title\")\n",
    "plt.xlabel(\"x-axis\")\n",
    "plt.ylabel(\"y-axis\")\n",
    "plt.plot([3, 5, 2, 1], [4, 6, 8, 3], color=\"red\", marker=\"^\")\n",
    "# plt.grid()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Scatter plot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "import matplotlib.pyplot as plt\n",
    "plt.title(\"My graph title\")\n",
    "plt.xlabel(\"x-axis\")\n",
    "plt.ylabel(\"y-axis\")\n",
    "plt.scatter([3, 5, 2, 1], [4, 6, 8, 3], color=\"red\",\n",
    "           marker=\"D\")\n",
    "# plt.grid()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy\n",
    "plt.title(\"My graph title\")\n",
    "plt.xlabel(\"x-axis\")\n",
    "plt.ylabel(\"y-axis\")\n",
    "plt.scatter(numpy.arange(1, 5), [4, 6, 8, 3], color=\"red\",\n",
    "           marker=\"D\")\n",
    "plt.grid(axis=\"y\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "plt.title(\"My graph title\")\n",
    "plt.xlabel(\"x-axis\")\n",
    "plt.ylabel(\"y-axis\")\n",
    "\n",
    "plt.bar([1], [3], color=\"red\", label=\"A\")\n",
    "plt.bar([2], [5], color=\"blue\", label=\"B\")\n",
    "plt.bar([3], [4], color=\"green\", label=\"C\")\n",
    "\n",
    "plt.legend()\n",
    "plt.savefig('mygraph.png')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "plt.title(\"My graph title\")\n",
    "\n",
    "plt.pie([349, 160, 350, 151, 110],\n",
    "        labels = ['A', 'B', 'C', 'D', 'E'],\n",
    "        startangle=90,\n",
    "        explode = (0,0,0,0.2,0),\n",
    "        shadow=True,\n",
    "        autopct = \"%.1f%%\"\n",
    "       )\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## NumPy and Pandas"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "l = [3, 5, 6, 10]\n",
    "l * 3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import time\n",
    "import numpy as np\n",
    "start = time.time() # Epoch time\n",
    "a = np.arange(10000000)\n",
    "print(\"Time taken \", time.time() - start)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import time\n",
    "start = time.time() \n",
    "a = list(range(10000000))\n",
    "print(\"Time taken \", time.time() - start)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "time.ctime()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "l"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "a = np.array(l)\n",
    "a*3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "b = np.array([[1, 2, 3], [4, 5, 6]])\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "b * 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "b[1:, 1:]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "np.ones((3, 4))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "np.zeros((2, 5))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "np.random.random((3, 4))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "k = np.arange(12).reshape((4, 3))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "k"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "k.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "k.size"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "k.ndim"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "k.dtype"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.read_csv('datasource.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['Phone']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['Phone'][:2]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df.head(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df.tail(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "k"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "k.mean()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### scipy.org"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Database connection"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import sqlite3\n",
    "# import mysql.connector \n",
    "\n",
    "# Step 1: Make connection object\n",
    "conn = sqlite3.connect('mydb')\n",
    "# conn = mysql.connector.connect(\n",
    "# host=\"localhost\", username=\"root\", password=\"\", database=\"mydb\"\n",
    "# )\n",
    "\n",
    "# Step 2: Make cursor object\n",
    "c = conn.cursor()\n",
    "\n",
    "# Step 3: Exeute Query\n",
    "sql1 = \"\"\"CREATE TABLE mytable(\n",
    "    name varchar(30),\n",
    "    email varchar(50)\n",
    ")\"\"\"\n",
    "\n",
    "c.execute(sql1)\n",
    "\n",
    "# Step 4: Closr connection\n",
    "# conn.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "sql2 = \"INSERT INTO mytable VALUES('John', 'john@gmail.com')\"\n",
    "c.execute(sql2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "sql2 = \"INSERT INTO mytable VALUES('Doe', 'doe@gmail.com')\"\n",
    "c.execute(sql2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "sql3 =  \"SELECT * FROM mytable\"\n",
    "c.execute(sql3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "c.fetchall()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# c.execute('DROP TABLE mytable')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "conn.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def c2f(c):\n",
    "    return \"%.2f\" % (c*9/5+32)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "c2f(31)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import tkinter"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## GUI application"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Step 1: Create main window of application\n",
    "#### Step 2: Create frame and grid\n",
    "#### Step 3: Define and position widget\n",
    "#### Step 4: Define and call the function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import tkinter\n",
    "root = tkinter.Tk()\n",
    "root.title(\"Celc2Feren\")\n",
    "\n",
    "frame = tkinter.Frame(root)\n",
    "frame.grid(row=2, column= 1)\n",
    "\n",
    "tkinter.Label(frame, text=\"Celcius\", fg=\"red\").grid(row= 0, \n",
    "                                                    column= 0)\n",
    "tkinter.Label(frame, text=\"Farenheite\", fg=\"green\").grid(row= 1, \n",
    "                                                         column= 0)\n",
    "c = tkinter.StringVar()\n",
    "f = tkinter.StringVar()\n",
    "tkinter.Entry(frame, textvariable=c, bg=\"yellow\").grid(row= 0, \n",
    "                                                       column= 1)\n",
    "tkinter.Label(frame, textvariable=f).grid(row= 1, column= 1)\n",
    "\n",
    "def c2f():\n",
    "    var = float(c.get())\n",
    "    var2 = \"%.2f\" % (var*9/5+32)\n",
    "    f.set(var2)\n",
    "tkinter.Button(frame, text=\"Convert\", command=c2f).grid(row= 2, \n",
    "                                                        column= 1)\n",
    "\n",
    "root.mainloop()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### tkdoc"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
